import java.io.File

import org.scalatest.{BeforeAndAfter, FunSpec, Matchers}

import scala.reflect.io.Directory

class AddTest extends FunSpec with Matchers with BeforeAndAfter {

  val test_directory = new File(System.getProperty("user.dir")+"/test_directory")
  val index_file = FileHandler(new File(test_directory.getPath+"/.sgit/INDEX"))
  val blobs_directory = new File(test_directory.getPath+"/.sgit/objects/blobs")

  val directory1 = new File(test_directory.getPath+"/directory1")
  val file1 = FileHandler(new File(test_directory.getPath+"/file1"))
  val file2 = FileHandler(new File(test_directory.getPath+"/file2"))
  val file3 = FileHandler(new File(test_directory.getPath+"/directory1/file3"))

  before{
    Init.createSgit(test_directory)
    directory1.mkdir()
    file1.createFile()
    file2.createFile()
    file3.createFile()
  }
  after{
    new Directory(new File(test_directory.getPath+"/.sgit")).deleteRecursively()
    file1.deleteFile()
    file2.deleteFile()
    file3.deleteFile()
    directory1.delete()
  }

  describe("an add process") {
    it("should have initially an empty INDEX") {
      index_file.getContent shouldBe ""
    }
    it("should createBlob of file1 and add it to INDEX file"){
      Add.addFileToIndex(file1.getPath)
      blobs_directory.listFiles() shouldBe Array[String]("hello")
    }
  }
}
